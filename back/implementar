/*----Encabezado----*/
package main

import (
	"fmt"
)

var t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14 float64
var P, H float64
var stack [22]float64
var heap [22]float64

/*-----NATIVES-----*/
func concatenarString() {
	t3 = P - 2
	t4 = stack[int(t3)]
	t5 = t3 + 1
	t6 = stack[int(t5)]
	stack[int(P)] = H
	P = P + 1
L1:
	t7 = heap[int(t4)]
	if t7 == -1 {
		goto L2
	}
	heap[int(H)] = t7
	H = H + 1
	t4 = t4 + 1
	goto L1
L2:
	t7 = heap[int(t6)]
	if t7 == -1 {
		goto L0
	}
	heap[int(H)] = t7
	H = H + 1
	t6 = t6 + 1
	goto L2
L0:
	heap[int(H)] = -1
	H = H + 1
	return
}
func printString() {
	t10 = P + 1
	t11 = stack[int(t10)]
L4:
	t12 = heap[int(t11)]
	H = H - 1
	if t12 == -1 {
		goto L3
	}
	fmt.Printf("%c", int(t12))
	t11 = t11 + 1
	goto L4
L3:
	return
}

	var a0,a1,a2,a3,a4,a5 float64;
func potenciaString() {
	a4=P-2
	a2 = a4 + 1
	a3 = stack[int(a2)] // contador de concatenaciones
	a3 = a3 + 1
	a5 = H // index de regreso
	stack[int(P)]=a5
	P=P+2
	L6:
		a3=a3-1
		a0 = stack[int(a4)]
		if a3 == 0 {goto L5;}
		goto L7
	L7:
		a1 = heap[int(a0)]
		if a1 == -1 {goto L6}
		heap[int(H)]=a1
		H=H+1
		a0 = a0 + 1
		goto L7
	L5:
	fmt.Println("")
	heap[int(H)]=-1
	H=H+1
	return;
}

func main() {
	t0 = H
	heap[int(H)] = 103
	H = H + 1
	heap[int(H)] = 100
	H = H + 1
	heap[int(H)] = 115
	H = H + 1
	heap[int(H)] = -1
	H = H + 1
	
	P=P+1
	stack[int(P)]=t0
	P=P+1
	stack[int(P)]=2
	P=P+1
	potenciaString();
	//t2=stack[int(0)]
	//fmt.Println(t2)
	P=P-1
	printString();
	fmt.Println(P);
	fmt.Println(stack)
	fmt.Println(heap)

}
